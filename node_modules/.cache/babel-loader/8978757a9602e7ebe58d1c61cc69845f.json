{"ast":null,"code":"var _jsxFileName = \"/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/components/Button.js\";\nimport React from 'react'; //for this component I am using inline styles to dynamically change button color on hover\n\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onHover = () => {\n      this.setState({\n        primaryColor: this.props.hoverColor,\n        textColor: \"white\"\n      });\n    };\n\n    this.onHoverOff = () => {\n      this.setState({\n        primaryColor: this.props.primaryColor,\n        textColor: \"black\"\n      });\n    };\n\n    this.state = {\n      primaryColor: this.props.primaryColor,\n      textColor: 'black'\n    };\n  }\n\n  render() {\n    const style = {\n      background: \"\".concat(this.state.primaryColor),\n      color: \"\".concat(this.state.textColor),\n      borderRadius: '10px',\n      transition: 'all .3s',\n      paddingLeft: '15px',\n      paddingRight: '15px',\n      paddingTop: '10px',\n      paddingBottom: '10px',\n      outline: '0'\n    };\n    return React.createElement(\"button\", {\n      className: \"button-layout\",\n      value: this.props.value,\n      onClick: this.props.onButtonClick,\n      onMouseOver: this.onHover,\n      onMouseLeave: this.onHoverOff,\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa \".concat(this.props.iconName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        marginLeft: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.props.children));\n  }\n\n}\n\nexport default Button;","map":{"version":3,"sources":["/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/components/Button.js"],"names":["React","Button","Component","constructor","props","onHover","setState","primaryColor","hoverColor","textColor","onHoverOff","state","render","style","background","color","borderRadius","transition","paddingLeft","paddingRight","paddingTop","paddingBottom","outline","value","onButtonClick","iconName","marginLeft","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAQlBC,OARkB,GAQR,MAAM;AACZ,WAAKC,QAAL,CACI;AACIC,QAAAA,YAAY,EAAE,KAAKH,KAAL,CAAWI,UAD7B;AAEIC,QAAAA,SAAS,EAAE;AAFf,OADJ;AAMH,KAfiB;;AAAA,SAiBlBC,UAjBkB,GAiBL,MAAM;AACf,WAAKJ,QAAL,CACI;AACIC,QAAAA,YAAY,EAAE,KAAKH,KAAL,CAAWG,YAD7B;AAEIE,QAAAA,SAAS,EAAE;AAFf,OADJ;AAMH,KAxBiB;;AAEd,SAAKE,KAAL,GAAa;AACTJ,MAAAA,YAAY,EAAE,KAAKH,KAAL,CAAWG,YADhB;AAETE,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIH;;AAqBDG,EAAAA,MAAM,GAAE;AACJ,UAAMC,KAAK,GAAG;AACVC,MAAAA,UAAU,YAAK,KAAKH,KAAL,CAAWJ,YAAhB,CADA;AAEVQ,MAAAA,KAAK,YAAK,KAAKJ,KAAL,CAAWF,SAAhB,CAFK;AAGVO,MAAAA,YAAY,EAAE,MAHJ;AAIVC,MAAAA,UAAU,EAAE,SAJF;AAKVC,MAAAA,WAAW,EAAE,MALH;AAMVC,MAAAA,YAAY,EAAE,MANJ;AAOVC,MAAAA,UAAU,EAAE,MAPF;AAQVC,MAAAA,aAAa,EAAE,MARL;AASVC,MAAAA,OAAO,EAAE;AATC,KAAd;AAWA,WACI;AAAQ,MAAA,SAAS,EAAG,eAApB;AACA,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWmB,KADlB;AAEA,MAAA,OAAO,EAAI,KAAKnB,KAAL,CAAWoB,aAFtB;AAGA,MAAA,WAAW,EAAI,KAAKnB,OAHpB;AAIA,MAAA,YAAY,EAAI,KAAKK,UAJrB;AAKA,MAAA,KAAK,EAAEG,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI;AAAG,MAAA,SAAS,eAAU,KAAKT,KAAL,CAAWqB,QAArB,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOI;AAAM,MAAA,KAAK,EAAG;AAACC,QAAAA,UAAU,EAAE;AAAb,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqC,KAAKtB,KAAL,CAAWuB,QAAhD,CAPJ,CADJ;AAWH;;AAnD+B;;AAyDpC,eAAe1B,MAAf","sourcesContent":["import React from 'react';\n\n//for this component I am using inline styles to dynamically change button color on hover\nclass Button extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            primaryColor: this.props.primaryColor,\n            textColor: 'black'\n        }\n    }\n\n    onHover = () => {\n        this.setState(\n            {\n                primaryColor: this.props.hoverColor,\n                textColor: \"white\"\n            }\n        );\n    }\n\n    onHoverOff = () => {\n        this.setState(\n            {\n                primaryColor: this.props.primaryColor,\n                textColor: \"black\"\n            }\n        );\n    }\n\n\n    render(){\n        const style = {\n            background: `${this.state.primaryColor}`,\n            color: `${this.state.textColor}`,\n            borderRadius: '10px',\n            transition: 'all .3s',\n            paddingLeft: '15px',\n            paddingRight: '15px',\n            paddingTop: '10px',\n            paddingBottom: '10px',\n            outline: '0'\n        }\n        return(\n            <button className = \"button-layout\" \n            value={this.props.value}\n            onClick = {this.props.onButtonClick} \n            onMouseOver = {this.onHover}\n            onMouseLeave = {this.onHoverOff}\n            style={style}>\n                <i className = {`fa ${this.props.iconName}`}/>\n                <span style ={{marginLeft: \"20px\"}}>{this.props.children}</span>\n            </button>\n        );\n    }\n    \n}\n\n\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}