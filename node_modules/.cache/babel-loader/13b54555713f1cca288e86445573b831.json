{"ast":null,"code":"var _jsxFileName = \"/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/App.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Spinner from './components/Spinner';\nimport Error from './components/Error';\nimport SearchBar from './components/SearchBar';\nimport PersonList from './components/PersonList';\nimport Dialog from './components/Dialog';\nimport './css/style-main.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [],\n      tempPersons: [],\n      isSearchResultEmpty: false,\n      dialogComponent: {}\n    };\n\n    this.showMainLayout = (persons, isSearchResultEmpty) => {\n      if (!isSearchResultEmpty && persons.length === 0) {\n        return React.createElement(Spinner, {\n          description: \"Fetching users data...\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          className: \"mainLayout\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(SearchBar, {\n          onSearchChange: this.onHandleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }), isSearchResultEmpty ? React.createElement(Error, {\n          description: \"No results\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }) : React.createElement(PersonList, {\n          persons: this.state.persons,\n          onCallButtonClick: this.onCallButtonClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.onCallButtonClick = event => {\n      let dialogBox;\n\n      if (event.currentTarget.value.length > 0) {\n        dialogBox = React.createElement(Dialog, {\n          person: event.currentTarget.value,\n          onCallButtonClick: this.onCallButtonClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });\n      }\n\n      this.setState({\n        dialogObject: dialogBox\n      });\n    };\n\n    this.onHandleChange = event => {\n      var that = this;\n      let tmpList = [];\n\n      if (event.target.value !== \"\") {\n        tmpList = this.state.persons.filter(person => {\n          return person.name.includes(event.target.value) || person.username.includes(event.target.value) || person.email.includes(event.target.value);\n        });\n      } else {\n        tmpList = this.state.tempPersons;\n      }\n\n      this.setState({\n        isSearchResultEmpty: tmpList.length === 0 ? true : false,\n        persons: tmpList\n      });\n    };\n  }\n\n  componentDidMount() {\n    var that = this; //purposely delaying the call\n\n    setTimeout(function () {\n      that.fetchUserData();\n    }, 2000);\n  }\n\n  fetchUserData() {\n    axios.get('https://jsonplaceholder.typicode.com/users ').then(res => {\n      this.setState({\n        persons: res.data,\n        tempPersons: res.data\n      });\n    });\n  }\n\n  render() {\n    const persons = this.state.persons;\n    const isSearchResultEmpty = this.state.isSearchResultEmpty;\n    let dialogBox = this.state.dialogComponent; // if(Object.entries(this.state.dialogObject).length !== 0){\n    //   dialogBox = <Dialog person={this.state.dialogObject} onCallButtonClick = {this.onCallButtonClick}/>;\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"layout-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, dialogBox, this.showMainLayout(persons, isSearchResultEmpty));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/App.js"],"names":["React","axios","Spinner","Error","SearchBar","PersonList","Dialog","App","Component","state","persons","tempPersons","isSearchResultEmpty","dialogComponent","showMainLayout","length","onHandleChange","onCallButtonClick","event","dialogBox","currentTarget","value","setState","dialogObject","that","tmpList","target","filter","person","name","includes","username","email","componentDidMount","setTimeout","fetchUserData","get","then","res","data","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Spinner from './components/Spinner';\nimport Error from './components/Error';\nimport SearchBar from './components/SearchBar';\nimport PersonList from './components/PersonList';\nimport Dialog from './components/Dialog';\nimport './css/style-main.css';\n\nclass App extends React.Component {\n  state = {\n    persons:[],\n    tempPersons: [],\n    isSearchResultEmpty: false,\n    dialogComponent: {}\n  }\n\n  componentDidMount(){\n    var that = this;\n\n    //purposely delaying the call\n    setTimeout(function(){\n      that.fetchUserData();\n    }, 2000);\n  }\n\n  fetchUserData(){\n    axios.get('https://jsonplaceholder.typicode.com/users ')\n    .then(res => {\n      this.setState(\n        {\n          persons: res.data,\n          tempPersons: res.data\n        }\n        );\n    });\n  }\n\n  showMainLayout = (persons, isSearchResultEmpty) => {\n    if(!isSearchResultEmpty && persons.length === 0){\n      return <Spinner description = \"Fetching users data...\" />;\n    }else{\n      return(\n      <div className = \"mainLayout\">\n        <SearchBar onSearchChange={this.onHandleChange}/>\n        {\n        isSearchResultEmpty \n        ?  <Error description=\"No results\" />\n        :  <PersonList persons = {this.state.persons} onCallButtonClick={this.onCallButtonClick}/>\n        }\n      </div>\n      );\n      \n    }\n  }\n\n  onCallButtonClick = (event) => {\n    let dialogBox;\n    if(event.currentTarget.value.length > 0){\n      dialogBox = <Dialog person={event.currentTarget.value} onCallButtonClick = {this.onCallButtonClick}/>;\n    }\n    this.setState({\n      dialogObject : dialogBox\n    });\n  }\n\n  onHandleChange = (event) => {\n    var that  = this;\n    let tmpList = [];\n    if(event.target.value !== \"\"){\n      tmpList = this.state.persons.filter(person => {\n        return person.name.includes(event.target.value) \n            || person.username.includes(event.target.value)\n            || person.email.includes(event.target.value);\n      })\n      \n    }else{\n      tmpList = this.state.tempPersons\n    }\n\n    this.setState({\n      isSearchResultEmpty: tmpList.length === 0 ? true : false,\n      persons: tmpList\n    });\n  }\n\n  render(){\n    const persons = this.state.persons;\n    const isSearchResultEmpty = this.state.isSearchResultEmpty;\n    let dialogBox = this.state.dialogComponent;\n    // if(Object.entries(this.state.dialogObject).length !== 0){\n    //   dialogBox = <Dialog person={this.state.dialogObject} onCallButtonClick = {this.onCallButtonClick}/>;\n    // }\n    return(\n      <div className = \"layout-container\">\n        {dialogBox}\n        {this.showMainLayout(persons, isSearchResultEmpty)}\n      </div>\n\n      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}