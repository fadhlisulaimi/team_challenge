{"ast":null,"code":"var _jsxFileName = \"/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/App.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Spinner from './components/Spinner';\nimport SearchBar from './components/SearchBar';\nimport PersonList from './components/PersonList';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [],\n      tempPersons: [],\n      isSearchResultEmpty: false\n    };\n\n    this.onHandleChange = event => {\n      var that = this;\n      let tmpList = [];\n\n      if (event.target.value !== \"\") {\n        tmpList = this.state.persons.filter(person => {\n          return person.name.includes(event.target.value) || person.username.includes(event.target.value) || person.email.includes(event.target.value);\n        });\n      } else {\n        tmpList = this.state.tempPersons;\n      }\n\n      this.setState({\n        isSearchResultEmpty: tmpList.length === 0 ? true : false,\n        persons: tmpList\n      });\n    };\n  }\n\n  componentDidMount() {\n    var that = this; //purposely delaying the call\n\n    setTimeout(function () {\n      that.fetchUserData();\n    }, 0);\n  }\n\n  fetchUserData() {\n    axios.get('https://jsonplaceholder.typicode.com/users ').then(res => {\n      this.setState({\n        persons: res.data,\n        tempPersons: res.data\n      });\n    });\n  }\n\n  showPersons() {\n    if (isPersonEmpty.length === 0) {\n      return React.createElement(Spinner, {\n        description: \"Loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(PersonList, {\n        persons: this.state.persons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    const isPersonEmpty = this.state.persons;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      onSearchChange: this.onHandleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), this.state.isSearchResultEmpty ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"No results...\")) : this.showPersons));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/App.js"],"names":["React","axios","Spinner","SearchBar","PersonList","App","Component","state","persons","tempPersons","isSearchResultEmpty","onHandleChange","event","that","tmpList","target","value","filter","person","name","includes","username","email","setState","length","componentDidMount","setTimeout","fetchUserData","get","then","res","data","showPersons","isPersonEmpty","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Spinner from './components/Spinner';\nimport SearchBar from './components/SearchBar';\nimport PersonList from './components/PersonList';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    persons:[],\n    tempPersons: [],\n    isSearchResultEmpty: false\n  }\n\n  componentDidMount(){\n    var that = this;\n\n    //purposely delaying the call\n    setTimeout(function(){\n      that.fetchUserData();\n    }, 0);\n  }\n\n  fetchUserData(){\n    axios.get('https://jsonplaceholder.typicode.com/users ')\n    .then(res => {\n      this.setState(\n        {\n          persons: res.data,\n          tempPersons: res.data\n        }\n        );\n    });\n  }\n\n  showPersons(){\n    if(isPersonEmpty.length === 0){\n      return <Spinner description = \"Loading\" />;\n    }else{\n      return <PersonList persons = {this.state.persons} />;\n    }\n  }\n\n  onHandleChange = (event) => {\n    var that  = this;\n    let tmpList = [];\n    if(event.target.value !== \"\"){\n      tmpList = this.state.persons.filter(person => {\n        return person.name.includes(event.target.value) \n            || person.username.includes(event.target.value)\n            || person.email.includes(event.target.value);\n      })\n      \n    }else{\n      tmpList = this.state.tempPersons\n    }\n\n    this.setState({\n      isSearchResultEmpty: tmpList.length === 0 ? true : false,\n      persons: tmpList\n    });\n  }\n\n  render(){\n    const isPersonEmpty = this.state.persons;\n    return(\n      <div>\n         \n          <div className = \"container\">\n          <SearchBar onSearchChange={this.onHandleChange}/>\n       \n        {\n          this.state.isSearchResultEmpty \n          ? <div><h5>No results...</h5></div>\n          : this.showPersons\n        }\n        \n      </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}