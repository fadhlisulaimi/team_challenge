{"ast":null,"code":"var _jsxFileName = \"/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/App.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Spinner from './components/Spinner';\nimport SearchBar from './components/SearchBar';\nimport PersonList from './components/PersonList';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [],\n      tempPersons: [],\n      isSearchResultEmpty: false\n    };\n\n    this.showSearchBar = isPersonEmpty => {\n      if (isPersonEmpty.length !== 0) {\n        return React.createElement(SearchBar, {\n          onSearchChange: this.onHandleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.showMainLayout = isPersonEmpty => {\n      if (isPersonEmpty.length === 0) {\n        return React.createElement(Spinner, {\n          description: \"Loading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(PersonList, {\n          persons: this.state.persons,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.onHandleChange = event => {\n      var that = this;\n      let tmpList = [];\n\n      if (event.target.value !== \"\") {\n        tmpList = this.state.persons.filter(person => {\n          return person.name.includes(event.target.value) || person.username.includes(event.target.value) || person.email.includes(event.target.value);\n        });\n      } else {\n        tmpList = this.state.tempPersons;\n      }\n\n      this.setState({\n        isSearchResultEmpty: tmpList.length === 0 ? true : false,\n        persons: tmpList\n      });\n    };\n  }\n\n  componentDidMount() {\n    var that = this; //purposely delaying the call\n\n    setTimeout(function () {\n      that.fetchUserData();\n    }, 2000);\n  }\n\n  fetchUserData() {\n    axios.get('https://jsonplaceholder.typicode.com/users ').then(res => {\n      this.setState({\n        persons: res.data,\n        tempPersons: res.data\n      });\n    });\n  }\n\n  render() {\n    const isPersonEmpty = this.state.persons;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.showSearchBar(isPersonEmpty), this.state.isSearchResultEmpty ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"No results...\")) : this.showMainLayout(isPersonEmpty));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/fadhli/Desktop/TeamChallenge/team-challenge/src/App.js"],"names":["React","axios","Spinner","SearchBar","PersonList","App","Component","state","persons","tempPersons","isSearchResultEmpty","showSearchBar","isPersonEmpty","length","onHandleChange","showMainLayout","event","that","tmpList","target","value","filter","person","name","includes","username","email","setState","componentDidMount","setTimeout","fetchUserData","get","then","res","data","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Spinner from './components/Spinner';\nimport SearchBar from './components/SearchBar';\nimport PersonList from './components/PersonList';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    persons:[],\n    tempPersons: [],\n    isSearchResultEmpty: false\n  }\n\n  componentDidMount(){\n    var that = this;\n\n    //purposely delaying the call\n    setTimeout(function(){\n      that.fetchUserData();\n    }, 2000);\n  }\n\n  fetchUserData(){\n    axios.get('https://jsonplaceholder.typicode.com/users ')\n    .then(res => {\n      this.setState(\n        {\n          persons: res.data,\n          tempPersons: res.data\n        }\n        );\n    });\n  }\n\n  showSearchBar = (isPersonEmpty) => {\n    if(isPersonEmpty.length !== 0){\n      return  <SearchBar onSearchChange={this.onHandleChange}/>;\n    }\n  }\n\n  showMainLayout = (isPersonEmpty) => {\n    \n    if(isPersonEmpty.length === 0){\n      return <Spinner description = \"Loading\" />;\n    }else{\n      return <PersonList persons = {this.state.persons} />;\n    }\n  }\n\n  onHandleChange = (event) => {\n    var that  = this;\n    let tmpList = [];\n    if(event.target.value !== \"\"){\n      tmpList = this.state.persons.filter(person => {\n        return person.name.includes(event.target.value) \n            || person.username.includes(event.target.value)\n            || person.email.includes(event.target.value);\n      })\n      \n    }else{\n      tmpList = this.state.tempPersons\n    }\n\n    this.setState({\n      isSearchResultEmpty: tmpList.length === 0 ? true : false,\n      persons: tmpList\n    });\n  }\n\n  render(){\n    const isPersonEmpty = this.state.persons;\n    return(\n\n         \n          <div className = \"container\">\n            {this.showSearchBar(isPersonEmpty)}\n         \n       \n        {\n          this.state.isSearchResultEmpty \n          ? <div><h5>No results...</h5></div>\n          : this.showMainLayout(isPersonEmpty)\n        }\n        \n      </div>\n\n      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}